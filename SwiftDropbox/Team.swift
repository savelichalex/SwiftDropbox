
/* Autogenerated. Do not edit. */

import Foundation
/**
    Datatypes and serializers for the team namespace
*/
open class Team {
    /**
        Information about a group.
    */
    open class GroupSummary: CustomStringConvertible {
        /// Undocumented
        open let groupName : String
        /// Undocumented
        open let groupId : String
        /// External ID of group. This is an arbitrary ID that an admin can attach to a group.
        open let groupExternalId : String?
        /// The number of members in the group.
        open let memberCount : UInt32
        public init(groupName: String, groupId: String, memberCount: UInt32, groupExternalId: String? = nil) {
            stringValidator()(value: groupName)
            self.groupName = groupName
            stringValidator()(value: groupId)
            self.groupId = groupId
            nullableValidator(stringValidator())(value: groupExternalId)
            self.groupExternalId = groupExternalId
            comparableValidator()(value: memberCount)
            self.memberCount = memberCount
        }
        open var description : String {
            return "\(prepareJSONForSerialization(GroupSummarySerializer().serialize(self)))"
        }
    }
    open class GroupSummarySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupSummary) -> JSON {
            let output = [ 
            "group_name": Serialization._StringSerializer.serialize(value.groupName),
            "group_id": Serialization._StringSerializer.serialize(value.groupId),
            "member_count": Serialization._UInt32Serializer.serialize(value.memberCount),
            "group_external_id": NullableSerializer(Serialization._StringSerializer).serialize(value.groupExternalId),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupSummary {
            switch json {
                case .dictionary(let dict):
                    let groupName = Serialization._StringSerializer.deserialize(dict["group_name"] ?? .null)
                    let groupId = Serialization._StringSerializer.deserialize(dict["group_id"] ?? .null)
                    let memberCount = Serialization._UInt32Serializer.deserialize(dict["member_count"] ?? .null)
                    let groupExternalId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["group_external_id"] ?? .null)
                    return GroupSummary(groupName: groupName, groupId: groupId, memberCount: memberCount, groupExternalId: groupExternalId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }
}
