
/* Autogenerated. Do not edit. */

import Foundation
/**
    Datatypes and serializers for the users namespace
*/
open class Users {
    /**
        The GetAccountArg struct
    */
    open class GetAccountArg: CustomStringConvertible {
        /// A user's account identifier.
        open let accountId : String
        public init(accountId: String) {
            stringValidator(minLength: 40, maxLength: 40)(value: accountId)
            self.accountId = accountId
        }
        open var description : String {
            return "\(prepareJSONForSerialization(GetAccountArgSerializer().serialize(self)))"
        }
    }
    open class GetAccountArgSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GetAccountArg) -> JSON {
            let output = [ 
            "account_id": Serialization._StringSerializer.serialize(value.accountId),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GetAccountArg {
            switch json {
                case .dictionary(let dict):
                    let accountId = Serialization._StringSerializer.deserialize(dict["account_id"] ?? .null)
                    return GetAccountArg(accountId: accountId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }
    /**
        The GetAccountError union
    */
    public enum GetAccountError: CustomStringConvertible {
        /**
            The specified accountId in GetAccountArg does not exist.
        */
        case noAccount
        case unknown
        public var description : String {
            return "\(prepareJSONForSerialization(GetAccountErrorSerializer().serialize(self)))"
        }
    }
    open class GetAccountErrorSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GetAccountError) -> JSON {
            switch value {
                case .noAccount:
                    var d = [String : JSON]()
                    d[".tag"] = .str("no_account")
                    return .dictionary(d)
                case .unknown:
                    var d = [String : JSON]()
                    d[".tag"] = .str("unknown")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> GetAccountError {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "no_account":
                            return GetAccountError.noAccount
                        case "unknown":
                            return GetAccountError.unknown
                        default:
                            return GetAccountError.unknown
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }
    /**
        What type of account this user has.
    */
    public enum AccountType: CustomStringConvertible {
        /**
            The basic account type.
        */
        case basic
        /**
            The Dropbox Pro account type.
        */
        case pro
        /**
            The Dropbox Business account type.
        */
        case business
        public var description : String {
            return "\(prepareJSONForSerialization(AccountTypeSerializer().serialize(self)))"
        }
    }
    open class AccountTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AccountType) -> JSON {
            switch value {
                case .basic:
                    var d = [String : JSON]()
                    d[".tag"] = .str("basic")
                    return .dictionary(d)
                case .pro:
                    var d = [String : JSON]()
                    d[".tag"] = .str("pro")
                    return .dictionary(d)
                case .business:
                    var d = [String : JSON]()
                    d[".tag"] = .str("business")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> AccountType {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "basic":
                            return AccountType.basic
                        case "pro":
                            return AccountType.pro
                        case "business":
                            return AccountType.business
                        default:
                            fatalError("Unknown tag \(tag)")
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }
    /**
        The amount of detail revealed about an account depends on the user being queried and the user making the query.
    */
    open class Account: CustomStringConvertible {
        /// The user's unique Dropbox ID.
        open let accountId : String
        /// Details of a user's name.
        open let name : Users.Name
        public init(accountId: String, name: Users.Name) {
            stringValidator(minLength: 40, maxLength: 40)(value: accountId)
            self.accountId = accountId
            self.name = name
        }
        open var description : String {
            return "\(prepareJSONForSerialization(AccountSerializer().serialize(self)))"
        }
    }
    open class AccountSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: Account) -> JSON {
            let output = [ 
            "account_id": Serialization._StringSerializer.serialize(value.accountId),
            "name": Users.NameSerializer().serialize(value.name),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> Account {
            switch json {
                case .dictionary(let dict):
                    let accountId = Serialization._StringSerializer.deserialize(dict["account_id"] ?? .null)
                    let name = Users.NameSerializer().deserialize(dict["name"] ?? .null)
                    return Account(accountId: accountId, name: name)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }
    /**
        Basic information about any account.
    */
    open class BasicAccount: Users.Account {
        /// Whether this user is a teammate of the current user. If this account is the current user's account, then
        /// this will be true.
        open let isTeammate : Bool
        public init(accountId: String, name: Users.Name, isTeammate: Bool) {
            self.isTeammate = isTeammate
            super.init(accountId: accountId, name: name)
        }
        open override var description : String {
            return "\(prepareJSONForSerialization(BasicAccountSerializer().serialize(self)))"
        }
    }
    open class BasicAccountSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: BasicAccount) -> JSON {
            let output = [ 
            "account_id": Serialization._StringSerializer.serialize(value.accountId),
            "name": Users.NameSerializer().serialize(value.name),
            "is_teammate": Serialization._BoolSerializer.serialize(value.isTeammate),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> BasicAccount {
            switch json {
                case .dictionary(let dict):
                    let accountId = Serialization._StringSerializer.deserialize(dict["account_id"] ?? .null)
                    let name = Users.NameSerializer().deserialize(dict["name"] ?? .null)
                    let isTeammate = Serialization._BoolSerializer.deserialize(dict["is_teammate"] ?? .null)
                    return BasicAccount(accountId: accountId, name: name, isTeammate: isTeammate)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }
    /**
        Detailed information about the current user's account.
    */
    open class FullAccount: Users.Account {
        /// The user's e-mail address.
        open let email : String
        /// The user's two-letter country code, if available. Country codes are based on ISO 3166-1
        /// http://en.wikipedia.org/wiki/ISO_3166-1.
        open let country : String?
        /// The language that the user specified. Locale tags will be IETF language tags
        /// http://en.wikipedia.org/wiki/IETF_language_tag.
        open let locale : String
        /// The user's referral link https://www.dropbox.com/referrals.
        open let referralLink : String
        /// If this account is a member of a team, information about that team.
        open let team : Users.Team?
        /// Whether the user has a personal and work account. If the current account is personal, then team will always
        /// be null, but isPaired will indicate if a work account is linked.
        open let isPaired : Bool
        /// What type of account this user has.
        open let accountType : Users.AccountType
        public init(accountId: String, name: Users.Name, email: String, locale: String, referralLink: String, isPaired: Bool, accountType: Users.AccountType, country: String? = nil, team: Users.Team? = nil) {
            stringValidator()(value: email)
            self.email = email
            nullableValidator(stringValidator(minLength: 2, maxLength: 2))(value: country)
            self.country = country
            stringValidator(minLength: 2)(value: locale)
            self.locale = locale
            stringValidator()(value: referralLink)
            self.referralLink = referralLink
            self.team = team
            self.isPaired = isPaired
            self.accountType = accountType
            super.init(accountId: accountId, name: name)
        }
        open override var description : String {
            return "\(prepareJSONForSerialization(FullAccountSerializer().serialize(self)))"
        }
    }
    open class FullAccountSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FullAccount) -> JSON {
            let output = [ 
            "account_id": Serialization._StringSerializer.serialize(value.accountId),
            "name": Users.NameSerializer().serialize(value.name),
            "email": Serialization._StringSerializer.serialize(value.email),
            "locale": Serialization._StringSerializer.serialize(value.locale),
            "referral_link": Serialization._StringSerializer.serialize(value.referralLink),
            "is_paired": Serialization._BoolSerializer.serialize(value.isPaired),
            "account_type": Users.AccountTypeSerializer().serialize(value.accountType),
            "country": NullableSerializer(Serialization._StringSerializer).serialize(value.country),
            "team": NullableSerializer(Users.TeamSerializer()).serialize(value.team),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FullAccount {
            switch json {
                case .dictionary(let dict):
                    let accountId = Serialization._StringSerializer.deserialize(dict["account_id"] ?? .null)
                    let name = Users.NameSerializer().deserialize(dict["name"] ?? .null)
                    let email = Serialization._StringSerializer.deserialize(dict["email"] ?? .null)
                    let locale = Serialization._StringSerializer.deserialize(dict["locale"] ?? .null)
                    let referralLink = Serialization._StringSerializer.deserialize(dict["referral_link"] ?? .null)
                    let isPaired = Serialization._BoolSerializer.deserialize(dict["is_paired"] ?? .null)
                    let accountType = Users.AccountTypeSerializer().deserialize(dict["account_type"] ?? .null)
                    let country = NullableSerializer(Serialization._StringSerializer).deserialize(dict["country"] ?? .null)
                    let team = NullableSerializer(Users.TeamSerializer()).deserialize(dict["team"] ?? .null)
                    return FullAccount(accountId: accountId, name: name, email: email, locale: locale, referralLink: referralLink, isPaired: isPaired, accountType: accountType, country: country, team: team)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }
    /**
        Information about a team.
    */
    open class Team: CustomStringConvertible {
        /// The team's unique ID.
        open let id : String
        /// The name of the team.
        open let name : String
        public init(id: String, name: String) {
            stringValidator()(value: id)
            self.id = id
            stringValidator()(value: name)
            self.name = name
        }
        open var description : String {
            return "\(prepareJSONForSerialization(TeamSerializer().serialize(self)))"
        }
    }
    open class TeamSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: Team) -> JSON {
            let output = [ 
            "id": Serialization._StringSerializer.serialize(value.id),
            "name": Serialization._StringSerializer.serialize(value.name),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> Team {
            switch json {
                case .dictionary(let dict):
                    let id = Serialization._StringSerializer.deserialize(dict["id"] ?? .null)
                    let name = Serialization._StringSerializer.deserialize(dict["name"] ?? .null)
                    return Team(id: id, name: name)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }
    /**
        Representations for a person's name to assist with internationalization.
    */
    open class Name: CustomStringConvertible {
        /// Also known as a first name.
        open let givenName : String
        /// Also known as a last name or family name.
        open let surname : String
        /// Locale-dependent name. In the US, a person's familiar name is their givenName, but elsewhere, it could be
        /// any combination of a person's givenName and surname.
        open let familiarName : String
        /// A name that can be used directly to represent the name of a user's Dropbox account.
        open let displayName : String
        public init(givenName: String, surname: String, familiarName: String, displayName: String) {
            stringValidator()(value: givenName)
            self.givenName = givenName
            stringValidator()(value: surname)
            self.surname = surname
            stringValidator()(value: familiarName)
            self.familiarName = familiarName
            stringValidator()(value: displayName)
            self.displayName = displayName
        }
        open var description : String {
            return "\(prepareJSONForSerialization(NameSerializer().serialize(self)))"
        }
    }
    open class NameSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: Name) -> JSON {
            let output = [ 
            "given_name": Serialization._StringSerializer.serialize(value.givenName),
            "surname": Serialization._StringSerializer.serialize(value.surname),
            "familiar_name": Serialization._StringSerializer.serialize(value.familiarName),
            "display_name": Serialization._StringSerializer.serialize(value.displayName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> Name {
            switch json {
                case .dictionary(let dict):
                    let givenName = Serialization._StringSerializer.deserialize(dict["given_name"] ?? .null)
                    let surname = Serialization._StringSerializer.deserialize(dict["surname"] ?? .null)
                    let familiarName = Serialization._StringSerializer.deserialize(dict["familiar_name"] ?? .null)
                    let displayName = Serialization._StringSerializer.deserialize(dict["display_name"] ?? .null)
                    return Name(givenName: givenName, surname: surname, familiarName: familiarName, displayName: displayName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }
    /**
        Information about a user's space usage and quota.
    */
    open class SpaceUsage: CustomStringConvertible {
        /// The user's total space usage (bytes).
        open let used : UInt64
        /// The user's space allocation.
        open let allocation : Users.SpaceAllocation
        public init(used: UInt64, allocation: Users.SpaceAllocation) {
            comparableValidator()(value: used)
            self.used = used
            self.allocation = allocation
        }
        open var description : String {
            return "\(prepareJSONForSerialization(SpaceUsageSerializer().serialize(self)))"
        }
    }
    open class SpaceUsageSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SpaceUsage) -> JSON {
            let output = [ 
            "used": Serialization._UInt64Serializer.serialize(value.used),
            "allocation": Users.SpaceAllocationSerializer().serialize(value.allocation),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SpaceUsage {
            switch json {
                case .dictionary(let dict):
                    let used = Serialization._UInt64Serializer.deserialize(dict["used"] ?? .null)
                    let allocation = Users.SpaceAllocationSerializer().deserialize(dict["allocation"] ?? .null)
                    return SpaceUsage(used: used, allocation: allocation)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }
    /**
        Space is allocated differently based on the type of account.
    */
    public enum SpaceAllocation: CustomStringConvertible {
        /**
            The user's space allocation applies only to their individual account.
        */
        case individual(Users.IndividualSpaceAllocation)
        /**
            The user shares space with other members of their team.
        */
        case team(Users.TeamSpaceAllocation)
        case other
        public var description : String {
            return "\(prepareJSONForSerialization(SpaceAllocationSerializer().serialize(self)))"
        }
    }
    open class SpaceAllocationSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SpaceAllocation) -> JSON {
            switch value {
                case .individual(let arg):
                    var d = Serialization.getFields(Users.IndividualSpaceAllocationSerializer().serialize(arg))
                    d[".tag"] = .str("individual")
                    return .dictionary(d)
                case .team(let arg):
                    var d = Serialization.getFields(Users.TeamSpaceAllocationSerializer().serialize(arg))
                    d[".tag"] = .str("team")
                    return .dictionary(d)
                case .other:
                    var d = [String : JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> SpaceAllocation {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "individual":
                            let v = Users.IndividualSpaceAllocationSerializer().deserialize(json)
                            return SpaceAllocation.individual(v)
                        case "team":
                            let v = Users.TeamSpaceAllocationSerializer().deserialize(json)
                            return SpaceAllocation.team(v)
                        case "other":
                            return SpaceAllocation.other
                        default:
                            return SpaceAllocation.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }
    /**
        The IndividualSpaceAllocation struct
    */
    open class IndividualSpaceAllocation: CustomStringConvertible {
        /// The total space allocated to the user's account (bytes).
        open let allocated : UInt64
        public init(allocated: UInt64) {
            comparableValidator()(value: allocated)
            self.allocated = allocated
        }
        open var description : String {
            return "\(prepareJSONForSerialization(IndividualSpaceAllocationSerializer().serialize(self)))"
        }
    }
    open class IndividualSpaceAllocationSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: IndividualSpaceAllocation) -> JSON {
            let output = [ 
            "allocated": Serialization._UInt64Serializer.serialize(value.allocated),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> IndividualSpaceAllocation {
            switch json {
                case .dictionary(let dict):
                    let allocated = Serialization._UInt64Serializer.deserialize(dict["allocated"] ?? .null)
                    return IndividualSpaceAllocation(allocated: allocated)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }
    /**
        The TeamSpaceAllocation struct
    */
    open class TeamSpaceAllocation: CustomStringConvertible {
        /// The total space currently used by the user's team (bytes).
        open let used : UInt64
        /// The total space allocated to the user's team (bytes).
        open let allocated : UInt64
        public init(used: UInt64, allocated: UInt64) {
            comparableValidator()(value: used)
            self.used = used
            comparableValidator()(value: allocated)
            self.allocated = allocated
        }
        open var description : String {
            return "\(prepareJSONForSerialization(TeamSpaceAllocationSerializer().serialize(self)))"
        }
    }
    open class TeamSpaceAllocationSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamSpaceAllocation) -> JSON {
            let output = [ 
            "used": Serialization._UInt64Serializer.serialize(value.used),
            "allocated": Serialization._UInt64Serializer.serialize(value.allocated),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamSpaceAllocation {
            switch json {
                case .dictionary(let dict):
                    let used = Serialization._UInt64Serializer.deserialize(dict["used"] ?? .null)
                    let allocated = Serialization._UInt64Serializer.deserialize(dict["allocated"] ?? .null)
                    return TeamSpaceAllocation(used: used, allocated: allocated)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }
    /**
        The GetAccountBatchArg struct
    */
    open class GetAccountBatchArg: CustomStringConvertible {
        /// List of user account identifiers.  Should not contain any duplicate account IDs.
        open let accountIds : Array<String>
        public init(accountIds: Array<String>) {
            arrayValidator(minItems: 1, itemValidator: stringValidator(minLength: 40, maxLength: 40))(value: accountIds)
            self.accountIds = accountIds
        }
        open var description : String {
            return "\(prepareJSONForSerialization(GetAccountBatchArgSerializer().serialize(self)))"
        }
    }
    open class GetAccountBatchArgSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GetAccountBatchArg) -> JSON {
            let output = [ 
            "account_ids": ArraySerializer(Serialization._StringSerializer).serialize(value.accountIds),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GetAccountBatchArg {
            switch json {
                case .dictionary(let dict):
                    let accountIds = ArraySerializer(Serialization._StringSerializer).deserialize(dict["account_ids"] ?? .null)
                    return GetAccountBatchArg(accountIds: accountIds)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }
    /**
        The GetAccountBatchError union
    */
    public enum GetAccountBatchError: CustomStringConvertible {
        /**
            The value is an account ID specified in accountIds in GetAccountBatchArg that does not exist.
        */
        case noAccount(String)
        case other
        public var description : String {
            return "\(prepareJSONForSerialization(GetAccountBatchErrorSerializer().serialize(self)))"
        }
    }
    open class GetAccountBatchErrorSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GetAccountBatchError) -> JSON {
            switch value {
                case .noAccount(let arg):
                    var d = ["no_account": Serialization._StringSerializer.serialize(arg)]
                    d[".tag"] = .str("no_account")
                    return .dictionary(d)
                case .other:
                    var d = [String : JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> GetAccountBatchError {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "no_account":
                            let v = Serialization._StringSerializer.deserialize(d["no_account"] ?? .null)
                            return GetAccountBatchError.noAccount(v)
                        case "other":
                            return GetAccountBatchError.other
                        default:
                            return GetAccountBatchError.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }
}
